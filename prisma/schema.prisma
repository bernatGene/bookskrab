// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// model Example {
//     id String @id @default(cuid())
// }

// // Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? @db.Text
//     access_token      String? @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

enum BOOK_ID_TYPE {
    ISBN10
    ISBN13
    ADHOC
}

model Author {
    identifier  String  @id @default(cuid())
    name        String  @unique
    aliases     String?
    nationality String?
    books       Book[]
}

model ClassificationTag {
    shortName   String @id
    description String
    taggedBooks Book[]
}

model BookShelf {
    shortName   String @id
    description String
    books       Book[]
}

model Book {
    identifier   String       @id
    idType       BOOK_ID_TYPE
    lastModified DateTime     @default(now())

    title              String
    publishedDate      String?
    language           String?
    thumbnailURL       String?
    authors            Author[]
    tags               ClassificationTag[]
    authorId           String
    isTranslation      Boolean             @default(false)
    copies             Int                 @default(1)
    bookShelf          BookShelf           @relation(fields: [bookShelfShortName], references: [shortName])
    bookShelfShortName String
}
